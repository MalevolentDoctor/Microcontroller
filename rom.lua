Rom = {}
Rom.__index = Rom

function Rom.new(microcomputer, start, size)
	local self = {}
	setmetatable(self, Rom)

	self.thisMicrocomputer = microcomputer
	self.size = size

	-- create and initialise rom table
	self.rom = {}
	for i = start,(start + size - 1) do
		self.rom[i] = 0x00
	end

	self.rom[0xfffc] = math.fmod(start, 0x100)
	self.rom[0xfffd] = bit.rshift(start, 8)

	local code = {
		-- initialise
		0x02, 0x01, -- adi 0x01
		0x00, 0x01, -- mov 0x0 0x1

		0x01, 0x01, -- add 0x1
		0x00, 0x02, -- mov 0x0 0x2
		0x00, 0x10, -- mov 0x1 0x0

		0x01, 0x02, -- add 0x2
		0x00, 0x03, -- mov 0x0 0x3
		0x00, 0x20, -- mov 0x2 0x0

		0x01, 0x03, -- add 0x3
		0x00, 0x04, -- mov 0x0 0x4
		0x00, 0x30, -- mov 0x3 0x0

		0x01, 0x04, -- add 0x4
		0x00, 0x05, -- mov 0x0 0x5
		0x00, 0x40, -- mov 0x4 0x0

		0x01, 0x05, -- add 0x5
		0x00, 0x06, -- mov 0x0 0x6
		0x00, 0x50, -- mov 0x5 0x0

		0x01, 0x06, -- add 0x6
		0x00, 0x07, -- mov 0x0 0x7
		0x00, 0x60, -- mov 0x6 0x0

		0x01, 0x07, -- add 0x7
		0x00, 0x08, -- mov 0x0 0x8

		0x05		-- hlt
	}

	for i,v in ipairs(code) do
		self.rom[start + (i-1)] = v
	end

	return self
end

function Rom:update(dt)
end


function Rom:draw()
end